{"google":"","body":"# Taskhelper\r\n\r\nTaskhelper is a dynamic Android application that allows for \"wizard\" style applications to be defined using JSON and synced with the device in the form of a ToDo list. There is also a server side component that handles the synchronisation and data storage.\r\n\r\n## Building\r\nThe project uses Maven to build things, and takes the form of a multi module maven project.\r\n\r\nDevelopment was done using Eclipse, and guidelines found here: http://www.workreloaded.com/2011/09/android-build-automation/ were followed to get Eclipse, ADT and maven playing nicely together.\r\n\r\n## Releasing\r\nIn order to package the apk for release, you need to configure a few things\r\n\r\nFirst, create your key following the instructions at http://developer.android.com/guide/publishing/app-signing.html#cert\r\n\r\nThen create a profile like this\r\n\r\n    <settings>\r\n       <profiles>\r\n            <profile>\r\n                <activation>\r\n                    <activeByDefault>true</activeByDefault>\r\n                </activation>\r\n                <properties>\r\n                    <sign.keystore>/absolute/path/to/your.keystore</sign.keystore>\r\n                    <sign.alias>youralias</sign.alias>\r\n                    <sign.keypass>keypass</sign.keypass>\r\n                    <sign.storepass>storepass</sign.storepass>\r\n                </properties>\r\n            </profile>\r\n        </profiles>\r\n    </settings>\r\n\r\nin your settings.xml file in ~/.m2\r\n\r\nOnce this is done, you can create a production version of the apk with the following command:\r\n\r\n    mvn clean install -P release\r\n\r\nwhich will in turn sign and zipalign the apk.","note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"Mobile workflow that integrates with existing back office systems","name":"Taskhelper"}