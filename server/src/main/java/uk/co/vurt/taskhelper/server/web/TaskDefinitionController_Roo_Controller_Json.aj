// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package uk.co.vurt.taskhelper.server.web;

import java.util.List;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import uk.co.vurt.taskhelper.server.domain.definition.AutoTaskDefinition;

privileged aspect TaskDefinitionController_Roo_Controller_Json {
    
    @RequestMapping(value = "/{id}", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<java.lang.String> TaskDefinitionController.showJson(@PathVariable("id") java.lang.Long id) {
        AutoTaskDefinition autotaskdefinition = AutoTaskDefinition.findAutoTaskDefinition(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/text; charset=utf-8");
        if (autotaskdefinition == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(autotaskdefinition.toJson(), headers, HttpStatus.OK);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<java.lang.String> TaskDefinitionController.listJson() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/text; charset=utf-8");
        List<AutoTaskDefinition> result = AutoTaskDefinition.findAllAutoTaskDefinitions();
        return new ResponseEntity<String>(AutoTaskDefinition.toJsonArray(result), headers, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<java.lang.String> TaskDefinitionController.createFromJson(@RequestBody java.lang.String json) {
        AutoTaskDefinition autoTaskDefinition = AutoTaskDefinition.fromJsonToAutoTaskDefinition(json);
        autoTaskDefinition.persist();
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/text");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<java.lang.String> TaskDefinitionController.createFromJsonArray(@RequestBody java.lang.String json) {
        for (AutoTaskDefinition autoTaskDefinition: AutoTaskDefinition.fromJsonArrayToAutoTaskDefinitions(json)) {
            autoTaskDefinition.persist();
        }
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/text");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<java.lang.String> TaskDefinitionController.updateFromJson(@RequestBody java.lang.String json) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/text");
        AutoTaskDefinition autoTaskDefinition = AutoTaskDefinition.fromJsonToAutoTaskDefinition(json);
        if (autoTaskDefinition.merge() == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<java.lang.String> TaskDefinitionController.updateFromJsonArray(@RequestBody java.lang.String json) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/text");
        for (AutoTaskDefinition autoTaskDefinition: AutoTaskDefinition.fromJsonArrayToAutoTaskDefinitions(json)) {
            if (autoTaskDefinition.merge() == null) {
                return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
            }
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<java.lang.String> TaskDefinitionController.deleteFromJson(@PathVariable("id") java.lang.Long id) {
        AutoTaskDefinition autoTaskDefinition = AutoTaskDefinition.findAutoTaskDefinition(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/text");
        if (autoTaskDefinition == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        autoTaskDefinition.remove();
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByNameLike", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<java.lang.String> TaskDefinitionController.jsonFindAutoTaskDefinitionsByNameLike(@RequestParam("name") java.lang.String name) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/text; charset=utf-8");
        return new ResponseEntity<String>(AutoTaskDefinition.toJsonArray(AutoTaskDefinition.findAutoTaskDefinitionsByNameLike(name).getResultList()), headers, HttpStatus.OK);
    }
    
}
